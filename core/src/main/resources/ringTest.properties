

# set data directory
dfs.data.dir=../data
# set result directory
# recommender result will output in this folder
dfs.result.dir=../../../ThesisResults


# Group properties
# base recommender for individual recommendations
group.base.recommender.class=biasedmf
rec.iterator.learnrate=0.01
# rec.iterator.learnrate.maximum=0.01
rec.iterator.maximum=200
rec.user.regularization=0.01
rec.item.regularization=0.01
rec.bias.regularization=0.01
rec.factor.number=20
rec.learnrate.bolddriver=false
# rec.learnrate.decay=1.0

# save groups to csv (will be saved next to results of recommendations)
group.save=false
group.builder=kmeans
group.number=20
group.external.exhaustive=false
rings.save=true

# convertor
# load data and splitting data 
# into two (or three) set
# setting dataset name
# data.input.path=movielens1m
data.input.path=movielens/ml-100k
# data.convert.sep=::
# data.input.path=filmtrust/rating
# setting dataset format(UIR, UIRT)
data.column.format=UIRT
# data.column.format=UIR
# setting method of split data
# value can be ratio, loocv, given, KCV
# data.model.splitter=groupSplitter
data.model.splitter=ratio
#data.splitter.cv.number=5
# using rating to split dataset
data.splitter.ratio=rating
# filmtrust dataset is saved by text
# text, arff is accepted
# data.model.format=text
# the ratio of trainset
# this value should in (0,1)
data.splitter.trainset.ratio=0.8

# Detailed configuration of loocv, given, KCV 
# is written in User Guide 

# set the random seed for reproducing the results (split data, init parameters and other methods using random)
# default is set 1l
# if do not set ,just use System.currentTimeMillis() as the seed and could not reproduce the results.
rec.random.seed=1

# binarize threshold mainly used in ranking
# -1.0 - maxRate, binarize rate into -1.0 and 1.0
# binThold = -1.0ï¼Œ do nothing
# binThold = value, rating > value is changed to 1.0 other is 0.0, mainly used in ranking
# for PGM 0.0 maybe a better choose
data.convert.binarize.threshold=-1.0

# evaluation the result or not
# rec.eval.enable=false
rec.eval.enable=true
rec.eval.group=false

# specifies evaluators
# rec.eval.classes=auc,precision,recall...
# if rec.eval.class is blank 
# every evaluator will be calculated
# rec.eval.classes=auc,precision,recall
rec.eval.classes=mae

# evaluator value set is written in User Guide
# if this algorithm is ranking only true or false
rec.recommender.isranking=false

#can use user,item,social similarity, default value is user, maximum values:user,item,social
rec.recommender.similarity.key=user

rec.neighbors.knn.number=10

data.model.format=ringDM
group.model=addUtil

rec.recommender.class=group

rec.recommender.similarities=user
rec.similarity.class=pcc
rec.neighbors.knn.number=20
rec.similarity.shrinkage=10
rec.recommender.approval=2.0
rec.misery.threshold=2.0
